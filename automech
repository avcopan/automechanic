#!/usr/bin/env python
""" compute geometries for species and store them in xyz files
"""
import os
import sys
import time
from argparse import ArgumentParser
from argparse import ArgumentDefaultsHelpFormatter as Formatter
import logging
import from_qtc.obtools
import automechanic.io2


def _get_help(parser, argv):
    if len(argv) == 1 and argv[0] in ('-h', '--help'):
        parser.print_help()
        parser.exit()


def _helpless_parser(prog):
    parser = ArgumentParser(prog=prog, formatter_class=Formatter,
                            add_help=False)
    return parser


def _logger(log_file_name, log_level=logging.INFO, print_out=False):

    if os.path.exists(log_file_name):
        time_stamp = time.strftime("_%Y%m%d-%H%M%S")
        log_file_name += time_stamp

    logger = logging.getLogger()
    logger.setLevel(log_level)

    fhandler = logging.FileHandler(log_file_name, mode='w')
    fhandler.setLevel(log_level)

    formatter = logging.Formatter('%(message)s')
    fhandler.setFormatter(formatter)

    logger.addHandler(fhandler)

    if print_out:
        shandler = logging.StreamHandler(sys.stdout)
        shandler.setLevel(log_level)
        shandler.setFormatter(formatter)
        logger.addHandler(shandler)

    return logger


def _route_subcommand(argv, cmd, subcmd_dct):
    """ subcommand function
    """
    hlp_str = 'commands: ' + ', '.join(subcmd_dct.keys())

    parser = _helpless_parser(cmd)
    parser.add_argument('<command>',
                        type=str,
                        help=hlp_str)
    _get_help(parser, argv)

    args = vars(parser.parse_args(argv[:1]))

    subcmd = args['<command>']

    if subcmd not in subcmd_dct:
        raise ValueError("Unrecognized command '{:s}'\n{:s}"
                         .format(subcmd, hlp_str))

    subcmd_dct[subcmd](argv[1:])


def main(argv):
    """ main function
    """
    _route_subcommand(argv=argv, cmd='automech',
                      subcmd_dct={'init': init})


def init(argv):
    """ initialize species and reactions
    """
    parser = _helpless_parser('automech init')

    # input arguments
    parser.add_argument('-j', '--rmg_mech_json',
                        type=str,
                        help="[i] RMG's mechanism JSON file")
    parser.add_argument('-m', '--chemkin_mech_txt',
                        type=str,
                        help="[i] CHEMKIN mechanism file")
    parser.add_argument('-s', '--species_csv',
                        type=str,
                        default='species.csv',
                        help="[i] csv with 'species_id' column")
    parser.add_argument('-p', '--print_out',
                        type=bool,
                        default=False,
                        help="Print to screen")
    parser.add_argument('-v', '--log_level',
                        type=int,
                        default=20,
                        help="log level: 20=INFO, 10=DEBUG")

    # output arguments
    parser.add_argument('-P', '--prefix',
                        type=str,
                        default='.',
                        help="[o] prefix for all output")
    parser.add_argument('-G', '--geom_dir',
                        type=str,
                        default='geoms',
                        help="[o] directory for storing geometry xyz files")
    parser.add_argument('-S', '--species_csv_out',
                        type=str,
                        default='species.csv',
                        help="[o] csv with 'species_id' and 'path' columns")
    parser.add_argument('-R',
                        '--reactions_csv_out',
                        type=str,
                        default='reactions.csv',
                        help="[o] csv file with 'reaction_id' column")
    parser.add_argument('-L', '--log_file_name',
                        type=str,
                        default='init.log',
                        help="[o] name of the log file for automech output")
    _get_help(parser, argv)

    args = vars(parser.parse_args(argv))

    logger = _logger(
        log_file_name=args['log_file_name'],
        log_level=args['log_level'],
        print_out=args['print_out']
    )

    def _sid2fname(sid):
        return from_qtc.obtools.get_smiles_filename(sid) + '.xyz'

    if args['rmg_mech_json']:
        automechanic.io2.init_from_rmg(
            rmg_mech_json=args['rmg_mech_json'],
            spc_csv_out=args['species_csv_out'],
            rxn_csv_out=args['reactions_csv_out'],
            prefix=args['prefix'],
            logger=logger
        )
    elif args['chemkin_mech_txt'] and args['species_csv']:
        automechanic.io2.init_from_chemkin(
            chemkin_mech_txt=args['chemkin_mech_txt'],
            spc_csv=args['species_csv'],
            spc_csv_out=args['species_csv_out'],
            rxn_csv_out=args['reactions_csv_out'],
            prefix=args['prefix'],
            logger=logger
        )
    else:
        raise ValueError("Needs --chemkin_mech_txt and --spc_csv or "
                         "--rmg_mech_json")

    automechanic.io2.init_geometries(
        spc_csv=args['species_csv'],
        spc_csv_out=args['species_csv_out'],
        geom_dir=args['geom_dir'],
        prefix=args['prefix'],
        sid2fname=_sid2fname,
        logger=logger
    )


if __name__ == '__main__':
    main(sys.argv[1:])
