#!/usr/bin/env python
""" compute geometries for species and store them in xyz files
"""
import os
import sys
from functools import partial
from argparse import ArgumentParser
from argparse import ArgumentDefaultsHelpFormatter as Formatter
import logging
import from_qtc.obtools
import automechanic.io

# required arguments
MECH_TXT_REQ_INP_AINF = (
    (),
    (('dest', '<mechanism_txt>'),
     ('type', str),
     ('help', "[i] CHEMKIN mechanism file"))
)
RXN_JSON_REQ_INP_AINF = (
    (),
    (('dest', '<reactions_json>'),
     ('type', str),
     ('help', "[i] RMG's reaction queue JSON file"))
)
SPC_JSON_REQ_INP_AINF = (
    (),
    (('dest', '<species_json>'),
     ('type', str),
     ('help', "[i] RMG's species queue JSON file"))
)
RXN_CSV_REQ_INO_AINF = (
    (),
    (('dest', '<reactions_csv>'),
     ('type', str),
     ('help', "[i(o)] CSV with reaction information"))
)
TAB_CSV_REQ_INO_AINF = (
    (),
    (('dest', '<table_csv>'),
     ('type', str),
     ('help', "[i(o)] CSV file"))
)
TAB_CSV_REQ_INP_AINF = (
    (),
    (('dest', '<table_csv>'),
     ('type', str),
     ('help', "[i] CSV file"))
)
RXN_CSV_REQ_INP_AINF = (
    (),
    (('dest', '<reactions_csv>'),
     ('type', str),
     ('help', "[i] CSV with reaction information"))
)
SPC_CSV_REQ_INP_AINF = (
    (),
    (('dest', '<species_csv>'),
     ('type', str),
     ('help', "[i] CSV with species information"))
)
COL_KEY_REQ_AINF = (
    (),
    (('dest', '<col_key>'),
     ('type', str),
     ('help', "CSV column key"))
)
# optional arguments
RXN_CSV_OPT_INP_AINF = (
    ('-r', '--reactions_csv'),
    (('type', str),
     ('default', 'reactions.csv'),
     ('help', "[i] CSV with reaction information"))
)
SPC_CSV_OPT_INP_AINF = (
    ('-s', '--species_csv'),
    (('type', str),
     ('default', 'species.csv'),
     ('help', "[i] CSV with species information"))
)
THM_TXT_OPT_INP_AINF = (
    ('-t', '--thermodynamic_data_txt'),
    (('type', str),
     ('default', None),
     ('help', "[i] CHEMKIN thermodynamic data file"))
)
TPL_TXT_OPT_INP_AINF = (
    ('-t', '--template_txt'),
    (('type', str),
     ('default', 'template.txt'),
     ('help', "[i] Input file template"))
)
RXN_CSV_OPT_OUT_AINF = (
    ('-R', '--reactions_csv_out'),
    (('type', str),
     ('default', 'reactions.csv'),
     ('help', "[o] CSV with reactions information"))
)
SPC_CSV_OPT_OUT_AINF = (
    ('-S', '--species_csv_out'),
    (('type', str),
     ('default', 'species.csv'),
     ('help', "[o] CSV with species information"))
)
CDT_CSV_OPT_OUT_AINF = (
    ('-C', '--candidates_csv_out'),
    (('type', str),
     ('default', 'candidates.csv'),
     ('help', "[o] CSV with left-over reaction candidates"))
)
TAB_CSV_OPT_OUT_AINF = (
    ('-T', '--table_csv_out'),
    (('type', str),
     ('default', 'table.csv'),
     ('help', "[o] CSV file"))
)
MECH_TXT_OPT_OUT_AINF = (
    ('-M', '--mechanism_txt'),
    (('type', str),
     ('default', 'mechanism.txt'),
     ('help', "[o] CHEMKIN mechanism file"))
)
GEOM_DIR_AINF = (
    ('-D', '--geom_dir'),
    (('type', str),
     ('default', 'geoms'),
     ('help', "[o] directory for storing geometry xyz files"))
)
RUN_DIR_AINF = (
    ('-D', '--run_dir'),
    (('type', str),
     ('default', 'runs'),
     ('help', "[o] directory for running reaction jobs"))
)
PLOT_DIR_AINF = (
    ('-D', '--plot_dir'),
    (('type', str),
     ('default', 'plots'),
     ('help', "[o] directory for storing plots"))
)
NO_THM_AINF = (
    ('-w', '--no_thermodynamic_data'),
    (('action', 'store_true'),
     ('help', "Don't use thermodynamic data"))
)
CMD_KEY_AINF = (
    (),
    (('dest', '<key>'),
     ('type', str))
)
CMD_AINF = (
    (),
    (('dest', 'cmd <commands for individual job>'),)
)
# generic action options
PREFIX_AINF = (
    ('-P', '--prefix'),
    (('type', str),
     ('default', '.'),
     ('help', "[o] prefix for all output"))
)
LOG_FILE_NAME_AINF = (
    ('-L', '--log_file_name'),
    (('type', str),
     ('help', "[o] name of the log file for automech output"))
)
LOG_LEVEL_AINF = (
    ('-v', '--log_level'),
    (('type', int),
     ('default', 20),
     ('help', "log verbosity: 20=INFO, 10=DEBUG"))
)
PRINT_OUT_AINF = (
    ('-p', '--print_out'),
    (('action', 'store_true'),
     ('help', "print log output to screen"))
)
# arguments for (deprecated) batch runner
RXN_CSV_OPT_INO_AINF = (
    ('-r', '--reactions_csv'),
    (('type', str),
     ('default', 'reactions.csv'),
     ('help', "[i(o)] CSV with reaction information"))
)
TPL_TXT_OPT_INP_AINF = (
    ('-t', '--template_txt'),
    (('type', str),
     ('default', 'template.txt'),
     ('help', "[i] Input file template"))
)
TPL_KEYVALS_AINF = (
    ('-y', '--template_keyvals'),
    (('type', str),
     ('default', 'nodes:d'),
     ('help', "template file substitions:  'key:val|key:val|...'"))
)
BTC_CSV_OPT_INP_AINF = (
    ('-b', '--batch_csv'),
    (('type', str),
     ('default', 'reactions.csv'),
     ('help', "[i] CSV file with batch of reactions to run"))
)


def _freeze_dictionary(items):
    return tuple(dict(items).items())


def _unfreeze_dictionary(items):
    return dict(items)


def _freeze_arginfo(ainf):
    args, kwargs = ainf
    frozen_kwargs = _freeze_dictionary(kwargs)
    return (args, frozen_kwargs)


def _unfreeze_arginfo(ainf):
    args, kwargs = ainf
    unfrozen_kwargs = _unfreeze_dictionary(kwargs)
    return (args, unfrozen_kwargs)


def _arginfo_add_help(ainf, help_str):
    args, kwargs = _unfreeze_arginfo(ainf)
    if help_str:
        kwargs['help'] += '; {:s}'.format(help_str)
    return _freeze_arginfo((args, kwargs))


def _arginfo_set(ainf, key, val):
    args, kwargs = _unfreeze_arginfo(ainf)
    kwargs[key] = val
    return _freeze_arginfo((args, kwargs))


def _arginfo_adjust(ainf, default=None, extra_help=''):
    ainf = _arginfo_add_help(ainf, extra_help)
    ainf = _arginfo_set(ainf, 'default', default)
    return ainf


def _arginfo_key(ainf):
    key = None

    args, kwargs = _unfreeze_arginfo(ainf)
    if args and args[-1].startswith('--'):
        key = args[-1][2:]
    elif 'dest' in kwargs:
        key = kwargs['dest']
    else:
        raise ValueError("Invalid argument information.")

    return key


def _parser(prog, ainf_lst=()):
    parser = ArgumentParser(prog=prog, formatter_class=Formatter,
                            add_help=False)

    for args, kwargs in ainf_lst:
        args = tuple(args)
        kwargs = dict(kwargs)
        parser.add_argument(*args, **kwargs)

    return parser


def _get_help(parser, argv):
    if len(argv) == 1 and ('-h' in argv or '--help' in argv):
        parser.print_help()
        parser.exit()


def _argument_values(argv, prog, ainf_lst=()):
    parser = _parser(prog, ainf_lst)
    _get_help(parser, argv)
    arg_dct = vars(parser.parse_args(argv))

    def __value(ainf):
        key = _arginfo_key(ainf)
        return arg_dct[key]

    return tuple(map(__value, ainf_lst))


# main functions
def main(argv):
    """ main function (CLI needs to be simplified)
    """
    _route_subcommand(
        argv=argv,
        cmd='automech',
        subcmd_dct={
            'init': init,
            'init_from_rmg': init_from_rmg,
            'divide': divide,
            'chemkin': chemkin_main,
            'get': get_main,
            'csv': csv_main,
            'plot': plot_main,
            'additions': partial(reactions_main, 'addition'),
            'abstractions': partial(reactions_main, 'abstraction'),
            'migrations': partial(reactions_main, 'migration')
        }
    )


def chemkin_main(argv):
    """ main function for operating on chemkin files
    """
    _route_subcommand(
        argv=argv,
        cmd='automech chemkin',
        subcmd_dct={
            'to_csv': chemkin_to_csv,
            'id_reactions': chemkin_id_reactions,
            'from_csv': chemkin_reactions_from_csv
        }
    )


def reactions_main(cls, argv):
    """ main function for reaction classes
    """
    _route_subcommand(
        argv=argv,
        cmd='automech {:s}s'.format(cls),
        subcmd_dct={
            'init': partial(reactions_init, cls),
            'run_batch': partial(reactions_run_batch, cls)
        }
    )


def csv_main(argv):
    """ main function for csv operations
    """
    _route_subcommand(
        argv=argv,
        cmd='automech csv',
        subcmd_dct={
            'reindex': csv_reindex,
            'sort': csv_sort,
            'merge': csv_merge,
            'intersect': csv_intersect
        }
    )


def plot_main(argv):
    """ main function for plotting
    """
    _route_subcommand(
        argv=argv,
        cmd='automech plot',
        subcmd_dct={
            'arrhenius': plot_arrhenius
        }
    )


def get_main(argv):
    """ main function for getters
    """
    _route_subcommand(
        argv=argv,
        cmd='automech get',
        subcmd_dct={
            'arrhenius': get_arrhenius
        }
    )


def init(argv):
    """ initialize a mechanism
    """
    prog = 'automech init'
    ainf_lst = (
        MECH_TXT_REQ_INP_AINF,
        _arginfo_add_help(SPC_CSV_REQ_INP_AINF,
                          help_str="columns: 'species', 'species_id'"),
        THM_TXT_OPT_INP_AINF,
        NO_THM_AINF,
        _arginfo_add_help(RXN_CSV_OPT_OUT_AINF,
                          help_str="columns: 'reaction_id'"),
        _arginfo_add_help(SPC_CSV_OPT_OUT_AINF,
                          help_str="columns: 'species_id', 'path'"),
        GEOM_DIR_AINF,
        PREFIX_AINF,
        _arginfo_set(LOG_FILE_NAME_AINF, 'default', 'init.log'),
        LOG_LEVEL_AINF,
        PRINT_OUT_AINF
    )

    (
        mech_txt_val,
        spc_csv_val,
        thm_txt_val,
        no_thm_val,
        rxn_csv_out_val,
        spc_csv_out_val,
        geom_dir_val,
        prefix_val,
        log_file_name_val,
        log_level_val,
        print_out_val,
    ) = _argument_values(argv, prog, ainf_lst)

    mech_txt_val = os.path.abspath(mech_txt_val)
    spc_csv_val = os.path.abspath(spc_csv_val)
    thm_txt_val = os.path.abspath(thm_txt_val) if thm_txt_val else None

    with _AutomechRoutine(prefix_val, log_file_name_val, log_level_val,
                          print_out_val) as routine:
        automechanic.io.init(
            mech_txt=mech_txt_val,
            spc_csv=spc_csv_val,
            rxn_csv_out=rxn_csv_out_val,
            spc_csv_out=spc_csv_out_val,
            geom_dir=geom_dir_val,
            id2path=from_qtc.obtools.get_smiles_filename,
            therm_txt=thm_txt_val,
            without_thermo=no_thm_val,
            logger=routine.logger
        )


def init_from_rmg(argv):
    """ initialize a mechanism from an RMG json file
    """
    prog = 'automech init_from_rmg'
    ainf_lst = (
        RXN_JSON_REQ_INP_AINF,
        SPC_JSON_REQ_INP_AINF,
        _arginfo_add_help(RXN_CSV_OPT_OUT_AINF,
                          help_str="columns: 'reaction_id'"),
        _arginfo_add_help(SPC_CSV_OPT_OUT_AINF,
                          help_str="columns: 'species_id', 'path'"),
        GEOM_DIR_AINF,
        PREFIX_AINF,
        _arginfo_set(LOG_FILE_NAME_AINF, 'default', 'init.log'),
        LOG_LEVEL_AINF,
        PRINT_OUT_AINF
    )

    (
        rxn_json_val,
        spc_json_val,
        rxn_csv_out_val,
        spc_csv_out_val,
        geom_dir_val,
        prefix_val,
        log_file_name_val,
        log_level_val,
        print_out_val,
    ) = _argument_values(argv, prog, ainf_lst)

    rxn_json_val = os.path.abspath(rxn_json_val)
    spc_json_val = os.path.abspath(spc_json_val)

    with _AutomechRoutine(prefix_val, log_file_name_val, log_level_val,
                          print_out_val) as routine:
        automechanic.io.init_from_rmg(
            mech_json=rxn_json_val,
            spc_json=spc_json_val,
            rxn_csv_out=rxn_csv_out_val,
            spc_csv_out=spc_csv_out_val,
            geom_dir=geom_dir_val,
            id2path=from_qtc.obtools.get_smiles_filename,
            logger=routine.logger
        )


def reactions_init(cls, argv):
    """ reactions initializer
    """
    prog = 'automech {:s}s init'.format(cls)
    ainf_lst = (
        _arginfo_add_help(RXN_CSV_REQ_INO_AINF,
                          help_str="columns: 'reaction_id'"),
        _arginfo_add_help(SPC_CSV_REQ_INP_AINF,
                          help_str="columns: 'species_id', 'path', "
                                   "'therm_val'"),
        _arginfo_add_help(RXN_CSV_OPT_OUT_AINF,
                          help_str="columns: 'reaction_id', {:s} species... "
                                   "{:s} indices...".format(cls, cls)),
        _arginfo_add_help(CDT_CSV_OPT_OUT_AINF,
                          help_str="columns: 'reaction_id', 'exception'"),
        PREFIX_AINF,
        _arginfo_set(LOG_FILE_NAME_AINF, 'default', 'init.log'),
        LOG_LEVEL_AINF,
        PRINT_OUT_AINF
    )

    (
        rxn_csv_val,
        spc_csv_val,
        rxn_csv_out_val,
        cdt_csv_out_val,
        prefix_val,
        log_file_name_val,
        log_level_val,
        print_out_val,
    ) = _argument_values(argv, prog, ainf_lst)

    rxn_csv_val = os.path.abspath(rxn_csv_val)
    spc_csv_val = os.path.abspath(spc_csv_val)

    with _AutomechRoutine(prefix_val, log_file_name_val, log_level_val,
                          print_out_val) as routine:
        automechanic.io.reactions_init(
            cls=cls,
            rxn_csv=rxn_csv_val,
            spc_csv=spc_csv_val,
            rxn_csv_out=rxn_csv_out_val,
            cdt_csv_out=cdt_csv_out_val,
            logger=routine.logger
        )


def reactions_run_batch(cls, argv):
    """ reactions batch runner
    """
    argv = _parse_runner_args(argv)
    prog = 'automech {:s}s run_batch'.format(cls)
    ainf_lst = (
        _arginfo_add_help(RXN_CSV_OPT_INO_AINF,
                          help_str="columns: 'reaction_id'"),
        _arginfo_add_help(SPC_CSV_OPT_INP_AINF,
                          help_str="columns: 'species_id', 'path'"),
        _arginfo_add_help(BTC_CSV_OPT_INP_AINF,
                          help_str="columns: 'reaction_id'"),
        _arginfo_add_help(TPL_TXT_OPT_INP_AINF,
                          help_str="str.format placeholders: 'nodes', "
                                   "{:s} species...".format(cls)),
        TPL_KEYVALS_AINF,
        RUN_DIR_AINF,
        PREFIX_AINF,
        _arginfo_set(LOG_FILE_NAME_AINF, 'default', 'run.log'),
        LOG_LEVEL_AINF,
        PRINT_OUT_AINF,
        CMD_AINF
    )

    (
        rxn_csv_val,
        spc_csv_val,
        btc_csv_val,
        tpl_txt_val,
        tpl_keyvals_val,
        run_dir_val,
        prefix_val,
        log_file_name_val,
        log_level_val,
        print_out_val,
        cmd_val
    ) = _argument_values(argv, prog, ainf_lst)

    rxn_csv_val = os.path.abspath(rxn_csv_val)
    spc_csv_val = os.path.abspath(spc_csv_val)
    btc_csv_val = os.path.abspath(btc_csv_val)
    tpl_txt_val = os.path.abspath(tpl_txt_val)

    with _AutomechRoutine(prefix_val, log_file_name_val, log_level_val,
                          print_out_val) as routine:
        automechanic.io.reactions_run_batch(
            cls=cls,
            rxn_csv=rxn_csv_val,
            spc_csv=spc_csv_val,
            batch_csv=btc_csv_val,
            tmp_txt=tpl_txt_val,
            tmp_keyval_str=tpl_keyvals_val,
            run_dir=run_dir_val,
            id2path=from_qtc.obtools.get_smiles_filename,
            job_argv=cmd_val,
            logger=routine.logger
        )


def _parse_runner_args(argv):
    ret_argv = list(argv)
    cmd_argv = None
    if 'cmd' in argv:
        cmd_pos = argv.index('cmd')
        ret_argv = argv[:cmd_pos]
        cmd_argv = argv[cmd_pos+1:]
    if '-h' not in argv and '--help' not in argv:
        ret_argv.append(cmd_argv)
    return ret_argv


def chemkin_to_csv(argv):
    """ parse CHEMKIN files
    """
    prog = 'automech chemkin to_csv'
    ainf_lst = (
        MECH_TXT_REQ_INP_AINF,
        THM_TXT_OPT_INP_AINF,
        _arginfo_adjust(RXN_CSV_OPT_OUT_AINF,
                        default='reactions.csv',
                        extra_help="columns: 'chemkin_index', 'reaction'"),
        _arginfo_adjust(SPC_CSV_OPT_OUT_AINF,
                        default='species.csv',
                        extra_help="columns: 'chemkin_index', 'species'"),
        PREFIX_AINF,
        _arginfo_adjust(LOG_FILE_NAME_AINF,
                        default='to_csv.log'),
        LOG_LEVEL_AINF,
        PRINT_OUT_AINF
    )

    (
        mech_txt_val,
        thm_txt_val,
        rxn_csv_out_val,
        spc_csv_out_val,
        prefix_val,
        log_file_name_val,
        log_level_val,
        print_out_val,
    ) = _argument_values(argv, prog, ainf_lst)

    mech_txt_val = os.path.abspath(mech_txt_val)
    thm_txt_val = os.path.abspath(thm_txt_val) if thm_txt_val else None

    with _AutomechRoutine(prefix_val, log_file_name_val, log_level_val,
                          print_out_val) as routine:
        automechanic.io.chemkin_to_csv(
            mech_txt=mech_txt_val,
            thm_txt=thm_txt_val,
            rxn_csv_out=rxn_csv_out_val,
            spc_csv_out=spc_csv_out_val,
            logger=routine.logger
        )


def chemkin_id_reactions(argv):
    """ determine reaction identifiers
    """
    prog = 'automech chemkin id_reactions'
    ainf_lst = (
        RXN_CSV_REQ_INP_AINF,
        SPC_CSV_REQ_INP_AINF,
        RXN_CSV_OPT_OUT_AINF,
        SPC_CSV_OPT_OUT_AINF,
        PREFIX_AINF,
        _arginfo_adjust(LOG_FILE_NAME_AINF,
                        default='from_csv.log'),
        LOG_LEVEL_AINF,
        PRINT_OUT_AINF
    )

    (
        rxn_csv_val,
        spc_csv_val,
        rxn_csv_out_val,
        spc_csv_out_val,
        prefix_val,
        log_file_name_val,
        log_level_val,
        print_out_val,
    ) = _argument_values(argv, prog, ainf_lst)

    rxn_csv_val = os.path.abspath(rxn_csv_val)

    with _AutomechRoutine(prefix_val, log_file_name_val, log_level_val,
                          print_out_val) as routine:
        automechanic.io.chemkin_id_reactions(
            rxn_csv=rxn_csv_val,
            spc_csv=spc_csv_val,
            rxn_csv_out=rxn_csv_out_val,
            spc_csv_out=spc_csv_out_val,
            logger=routine.logger
        )


def chemkin_reactions_from_csv(argv):
    """ write CSV data to CHEMKIN file
    """
    prog = 'automech chemkin from_csv'
    ainf_lst = (
        RXN_CSV_REQ_INP_AINF,
        MECH_TXT_OPT_OUT_AINF,
        PREFIX_AINF,
        _arginfo_adjust(LOG_FILE_NAME_AINF,
                        default='from_csv.log'),
        LOG_LEVEL_AINF,
        PRINT_OUT_AINF
    )

    (
        rxn_csv_val,
        mech_txt_out_val,
        prefix_val,
        log_file_name_val,
        log_level_val,
        print_out_val,
    ) = _argument_values(argv, prog, ainf_lst)

    rxn_csv_val = os.path.abspath(rxn_csv_val)

    with _AutomechRoutine(prefix_val, log_file_name_val, log_level_val,
                          print_out_val) as routine:
        automechanic.io.chemkin_reactions_from_csv(
            rxn_csv=rxn_csv_val,
            mech_txt_out=mech_txt_out_val,
            logger=routine.logger
        )


def get_arrhenius(argv):
    """ get arrhenius paramaters
    """
    prog = 'automech get arrhenius'
    ainf_lst = (
        RXN_CSV_REQ_INP_AINF,
        RXN_CSV_OPT_OUT_AINF,
        PREFIX_AINF,
        _arginfo_set(LOG_FILE_NAME_AINF, 'default', 'get.log'),
        LOG_LEVEL_AINF,
        PRINT_OUT_AINF
    )

    (
        rxn_csv_val,
        rxn_csv_out_val,
        prefix_val,
        log_file_name_val,
        log_level_val,
        print_out_val,
    ) = _argument_values(argv, prog, ainf_lst)

    rxn_csv_val = os.path.abspath(rxn_csv_val)

    with _AutomechRoutine(prefix_val, log_file_name_val, log_level_val,
                          print_out_val) as routine:
        automechanic.io.get_arrhenius(
            rxn_csv=rxn_csv_val,
            rxn_csv_out=rxn_csv_out_val,
            logger=routine.logger
        )


def csv_reindex(argv):
    """ (over)write the 'index' column in a csv file
    """
    prog = 'automech csv reindex'
    ainf_lst = (
        TAB_CSV_REQ_INO_AINF,
        PREFIX_AINF,
        _arginfo_set(LOG_FILE_NAME_AINF, 'default', 'reindex.log'),
        LOG_LEVEL_AINF,
        PRINT_OUT_AINF
    )

    (
        tab_csv_val,
        prefix_val,
        log_file_name_val,
        log_level_val,
        print_out_val,
    ) = _argument_values(argv, prog, ainf_lst)

    tab_csv_val = os.path.abspath(tab_csv_val)

    with _AutomechRoutine(prefix_val, log_file_name_val, log_level_val,
                          print_out_val) as routine:
        automechanic.io.csv_reindex(
            table_csv=tab_csv_val,
            logger=routine.logger
        )


def csv_sort(argv):
    """ sort a csv file by column
    """
    prog = 'automech csv sort'
    dsc_ainf = (
        ('-d', '--descending'),
        (('action', 'store_true'),
         ('help', "Sort CSV in descending order"))
    )
    ainf_lst = (
        TAB_CSV_REQ_INO_AINF,
        COL_KEY_REQ_AINF,
        dsc_ainf,
        PREFIX_AINF,
        _arginfo_set(LOG_FILE_NAME_AINF, 'default', 'sort.log'),
        LOG_LEVEL_AINF,
        PRINT_OUT_AINF
    )

    (
        tab_csv_val,
        col_key_val,
        dsc_val,
        prefix_val,
        log_file_name_val,
        log_level_val,
        print_out_val,
    ) = _argument_values(argv, prog, ainf_lst)

    tab_csv_val = os.path.abspath(tab_csv_val)

    with _AutomechRoutine(prefix_val, log_file_name_val, log_level_val,
                          print_out_val) as routine:
        automechanic.io.csv_sort(
            table_csv=tab_csv_val,
            col_key=col_key_val,
            descending=dsc_val,
            logger=routine.logger
        )


def csv_merge(argv):
    """ merge reaction csv files
    """
    prog = 'automech csv merge'
    ainf_lst = (
        _arginfo_set(TAB_CSV_REQ_INP_AINF, 'nargs', '+'),
        COL_KEY_REQ_AINF,
        TAB_CSV_OPT_OUT_AINF,
        PREFIX_AINF,
        _arginfo_set(LOG_FILE_NAME_AINF, 'default', 'merge.log'),
        LOG_LEVEL_AINF,
        PRINT_OUT_AINF
    )

    (
        tab_csvs_val,
        col_key_val,
        tab_csv_out_val,
        prefix_val,
        log_file_name_val,
        log_level_val,
        print_out_val,
    ) = _argument_values(argv, prog, ainf_lst)

    assert len(tab_csvs_val) > 1
    tab_csvs_val = tuple(map(os.path.abspath, tab_csvs_val))

    with _AutomechRoutine(prefix_val, log_file_name_val, log_level_val,
                          print_out_val) as routine:
        automechanic.io.csv_merge(
            table_csvs=tab_csvs_val,
            col_key=col_key_val,
            table_csv_out=tab_csv_out_val,
            logger=routine.logger
        )


def csv_intersect(argv):
    """ intersect reaction csv files
    """
    prog = 'automech csv intersect'
    ainf_lst = (
        _arginfo_set(TAB_CSV_REQ_INP_AINF, 'nargs', '+'),
        COL_KEY_REQ_AINF,
        TAB_CSV_OPT_OUT_AINF,
        PREFIX_AINF,
        _arginfo_set(LOG_FILE_NAME_AINF, 'default', 'merge.log'),
        LOG_LEVEL_AINF,
        PRINT_OUT_AINF
    )

    (
        tab_csvs_val,
        col_key_val,
        tab_csv_out_val,
        prefix_val,
        log_file_name_val,
        log_level_val,
        print_out_val,
    ) = _argument_values(argv, prog, ainf_lst)

    assert len(tab_csvs_val) > 1
    tab_csvs_val = tuple(map(os.path.abspath, tab_csvs_val))

    with _AutomechRoutine(prefix_val, log_file_name_val, log_level_val,
                          print_out_val) as routine:
        automechanic.io.csv_intersect(
            table_csvs=tab_csvs_val,
            col_key=col_key_val,
            table_csv_out=tab_csv_out_val,
            logger=routine.logger
        )


def plot_arrhenius(argv):
    """ make Arrhenius plots
    """
    prog = 'automech plot arrhenius'
    rxn_csv_ref_ainf = (
        ('-r', '--reaction_csv_ref'),
        (('type', str),
         ('default', None),
         ('help',
          "[i] Secondary reactions CSV with reference values to plot against; "
          "columns: 'reaction_id', 'arrh_a', 'arrh_b', 'arrh_e'"))
    )
    ext_ainf = (
        ('-e', '--extension'),
        (('type', str),
         ('default', 'pdf'),
         ('help', "Determines image format: png, pdf, ps, eps, svg"))
    )
    tmp_rng_ainf = (
        ('-x', '--temperature_range'),
        (('type', float),
         ('nargs', 2),
         ('default', [100, 1000]),
         ('help', "Temperature range over which to plot."))
    )
    col_key_opt_ainf = (
        ('-k', '--column_key'),
        (('type', str),
         ('nargs', '+'),
         ('default', []),
         ('help', "CSV column key(s) for plot labeling"))
    )
    ainf_lst = (
        _arginfo_add_help(RXN_CSV_REQ_INP_AINF,
                          help_str="columns: 'reaction_id', 'arrh_a', "
                                   "'arrh_b', 'arrh_e'"),
        rxn_csv_ref_ainf,
        _arginfo_add_help(RXN_CSV_OPT_OUT_AINF,
                          help_str="columns: 'reaction_id', 'arrh_a', "
                                   "'arrh_b', 'arrh_e', 'plot_path'"),
        PLOT_DIR_AINF,
        ext_ainf,
        tmp_rng_ainf,
        col_key_opt_ainf,
        PREFIX_AINF,
        _arginfo_set(LOG_FILE_NAME_AINF, 'default', 'plot.log'),
        LOG_LEVEL_AINF,
        PRINT_OUT_AINF
    )

    (
        rxn_csv_val,
        rxn_csv_ref_val,
        rxn_csv_out_val,
        plot_dir_val,
        ext_val,
        tmp_rng_val,
        col_keys_val,
        prefix_val,
        log_file_name_val,
        log_level_val,
        print_out_val,
    ) = _argument_values(argv, prog, ainf_lst)

    rxn_csv_val = os.path.abspath(rxn_csv_val)
    rxn_csv_ref_val = (os.path.abspath(rxn_csv_ref_val) if rxn_csv_ref_val
                       else None)

    with _AutomechRoutine(prefix_val, log_file_name_val, log_level_val,
                          print_out_val) as routine:
        automechanic.io.plot_arrhenius(
            rxn_csv=rxn_csv_val,
            rxn_csv_ref=rxn_csv_ref_val,
            rxn_csv_out=rxn_csv_out_val,
            plot_dir=plot_dir_val,
            extension=ext_val,
            tmp_rng=tmp_rng_val,
            lbl_col_keys=col_keys_val,
            id2path=from_qtc.obtools.get_smiles_filename,
            logger=routine.logger
        )


def divide(argv):
    """ divide into binary categories, by key
    """
    prog = 'automech divide'
    dir_in_ainf = (
        (),
        (('dest', '<dir_in>'),
         ('type', str),
         ('help', 'directory for in-category reactions'))
    )
    dir_out_ainf = (
        (),
        (('dest', '<dir_out>'),
         ('type', str),
         ('help', 'directory for out-of-category reactions'))
    )
    cmd_keys = ('rad-rad', 'high-spin')
    cmd_keys_help_str = 'options: {:s}'.format(', '.join(cmd_keys))
    ainf_lst = (
        _arginfo_set(CMD_KEY_AINF, 'help', cmd_keys_help_str),
        dir_in_ainf,
        dir_out_ainf,
        RXN_CSV_OPT_INO_AINF,
        RXN_CSV_OPT_OUT_AINF,
        PREFIX_AINF,
        _arginfo_set(LOG_FILE_NAME_AINF, 'default', 'divide.log'),
        LOG_LEVEL_AINF,
        PRINT_OUT_AINF
    )

    (
        cmd_key_val,
        dir_in_val,
        dir_out_val,
        rxn_csv_val,
        rxn_csv_out_val,
        prefix_val,
        log_file_name_val,
        log_level_val,
        print_out_val,
    ) = _argument_values(argv, prog, ainf_lst)

    rxn_csv_val = os.path.abspath(rxn_csv_val)

    with _AutomechRoutine(prefix_val, log_file_name_val, log_level_val,
                          print_out_val) as routine:
        automechanic.io.divide(
            key=cmd_key_val,
            dir1=dir_in_val,
            dir2=dir_out_val,
            rxn_csv=rxn_csv_val,
            rxn_csv_out=rxn_csv_out_val,
            logger=routine.logger
        )


# helpers
def _route_subcommand(argv, cmd, subcmd_dct):
    """ subcommand function
    """
    hlp_str = 'commands: ' + ', '.join(subcmd_dct.keys())

    parser = _parser(cmd)
    parser.add_argument('<command>',
                        type=str,
                        help=hlp_str)
    _get_help(parser, argv)

    args = vars(parser.parse_args(argv[:1]))

    subcmd = args['<command>']

    if subcmd not in subcmd_dct:
        raise ValueError("Unrecognized command '{:s}'\n{:s}"
                         .format(subcmd, hlp_str))

    subcmd_dct[subcmd](argv[1:])


def _split_command_args(argv):
    automech_argv = argv
    job_argv = None
    if 'cmd' in argv:
        cmd_pos = argv.index('cmd') + 1
        automech_argv = argv[:cmd_pos]
        job_argv = argv[cmd_pos:]
    else:
        automech_argv.append('cmd')
    return automech_argv, job_argv


def _logger(log_file_name, log_level=logging.INFO, print_out=False):
    automechanic.io.timestamp_if_exists(log_file_name)

    logger = logging.getLogger()
    logger.setLevel(log_level)

    fhandler = logging.FileHandler(log_file_name, mode='w')
    fhandler.setLevel(log_level)

    formatter = logging.Formatter('%(message)s')
    fhandler.setFormatter(formatter)

    logger.addHandler(fhandler)

    if print_out:
        shandler = logging.StreamHandler(sys.stdout)
        shandler.setLevel(log_level)
        shandler.setFormatter(formatter)
        logger.addHandler(shandler)

    return logger


class _AutomechRoutine(object):

    def __init__(self, prefix, log_file_name, log_level, print_out):
        self.working_directory = os.getcwd()
        self.other_directory = os.path.abspath(prefix)
        self.log_file_name = log_file_name
        self.log_level = log_level
        self.print_out = print_out
        self.logger = None

    def __enter__(self):
        if not os.path.exists(self.other_directory):
            os.mkdir(self.other_directory)
        os.chdir(self.other_directory)
        self.logger = _logger(
            log_file_name=self.log_file_name,
            log_level=self.log_level,
            print_out=self.print_out
        )
        return self

    def __exit__(self, _type, _value, _traceback):
        os.chdir(self.working_directory)


if __name__ == '__main__':
    main(sys.argv[1:])
