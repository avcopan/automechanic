#!/usr/bin/env python
""" run reactions
"""

import sys
import os
import subprocess
import argparse
from argparse import ArgumentDefaultsHelpFormatter as Formatter
import logging
import pandas
import automechanic.io

logging.basicConfig(
        format='%(message)s', filename='abstr_run.log', filemode='w',
        level=logging.INFO)

PARSER = argparse.ArgumentParser(formatter_class=Formatter)

PARSER.add_argument('-a',
                    '--abstractions_csv',
                    type=str,
                    default='abstractions.csv',
                    help="csv file with 'reaction_id' and 'path' columns'")

PARSER.add_argument('-t',
                    '--template_file',
                    type=str,
                    default='template.txt',
                    help="template TorsScan input with .format substitutions")


PARSER.add_argument('-i',
                    '--input_name',
                    type=str,
                    default='input.dat',
                    help="what to name the TorsScan input file")

PARSER.add_argument('-x',
                    '--reaction_indices',
                    type=str,
                    nargs='+',
                    help="ranges of reaction indices to run")

PARSER.add_argument('-n',
                    '--nodes',
                    type=str,
                    default='0',
                    nargs='+',
                    help="one or more nodes for TorsScan")

PARSER.add_argument('cmd <torsscan-arguments...>')

if 'cmd' in sys.argv:
    CMD_ARGNO = sys.argv.index('cmd')
    AUTOMECH_ARGS = sys.argv[:CMD_ARGNO]
    TORSSCAN_ARGS = sys.argv[CMD_ARGNO+1:]
else:
    AUTOMECH_ARGS = sys.argv

ARGS = vars(PARSER.parse_args(AUTOMECH_ARGS))

ABSTR_CSV = ARGS['abstractions_csv']
TMP_FLE = ARGS['template_file']
INP_NAME = ARGS['input_name']
IDX_STRS = ARGS['reaction_indices']
NODES = ', '.join(ARGS['nodes'])
CMDS = TORSSCAN_ARGS

TMP_STR = open(TMP_FLE).read()
ABSTR_DF = pandas.read_csv(ABSTR_CSV)

if IDX_STRS is None:
    IDXS = list(range(len(ABSTR_DF.index)))
else:
    IDXS = []
    for idx_str in IDX_STRS:
        splt = idx_str.split('-')
        if len(splt) == 1:
            idx = int(splt[-1])
            IDXS += [idx]
        elif len(splt) == 2:
            begin, end = map(int, splt)
            # make the ranges inclusive
            IDXS += list(range(begin, end+1))
        else:
            raise ValueError("Invalid argument for reaction_indices: {:s}"
                             .format(idx_str))

CWD = os.getcwd()
for idx in IDXS:
    path = ABSTR_DF.at[idx, 'path']
    rid = ABSTR_DF.at[idx, 'reaction_id']
    rct_sids, prd_sids = automechanic.strid.split_reaction_identifier(rid)
    q1h_sid, q2_sid = rct_sids
    q1_sid, q2h_sid = prd_sids
    inp_str = TMP_STR.format(q1h=q1h_sid, q2=q2_sid, q1=q1_sid, q2h=q2h_sid,
                             nodes=NODES)
    inp_path = os.path.join(path, INP_NAME)
    automechanic.io.write_file(inp_path, inp_str)
    os.chdir(path)
    logging.info('entering {:s}...'.format(path))
    logging.info('  running command {:s}'.format(' '.join(CMDS)))
    try:
        subprocess.check_call(CMDS)
    except Exception as err:
        logging.info('  TorsScan call failed:    {:s}\n'.format(err))
    os.chdir(CWD)
