#!/usr/bin/env python
""" run reactions
"""

import os
import subprocess
import warnings
warnings.filterwarnings("ignore", message="numpy.dtype size changed")
warnings.filterwarnings("ignore", message="numpy.ufunc size changed")
import pandas
import argparse
from argparse import ArgumentDefaultsHelpFormatter as Formatter
import automechanic.io

PARSER = argparse.ArgumentParser(formatter_class=Formatter)

PARSER.add_argument('-a',
                    '--abstractions_csv',
                    type=str,
                    default='abstractions.csv',
                    help="csv file with 'smirks' and 'path' columns'")

PARSER.add_argument('-t',
                    '--template_file',
                    type=str,
                    default='template.txt',
                    help="template TorsScan input with .format substitutions")


PARSER.add_argument('-i',
                    '--input_name',
                    type=str,
                    default='input.dat',
                    help="what to name the TorsScan input file")

PARSER.add_argument('-x',
                    '--reaction_indices',
                    type=str,
                    nargs='+',
                    help="ranges of reaction indices to run")

PARSER.add_argument('-n',
                    '--node',
                    type=str,
                    default='0',
                    help="node argument for TorsScan")

PARSER.add_argument('-c',
                    '--commands',
                    type=str,
                    default=['python', '/home/elliott/Packages/TorsScan/torsional_scan.py'],
                    nargs='+',
                    help="commands to run TorsScan")

ARGS = vars(PARSER.parse_args())

ABSTR_CSV = ARGS['abstractions_csv']
TMP_FLE = ARGS['template_file']
INP_NAME = ARGS['input_name']
IDX_STRS = ARGS['reaction_indices']
NODE = ARGS['node']
CMDS = ARGS['commands']

TMP_STR = open(TMP_FLE).read()
ABSTR_DF = pandas.read_csv(ABSTR_CSV)

if IDX_STRS is None:
    IDXS = list(range(len(ABSTR_DF.index)))
else:
    IDXS = []
    for idx_str in IDX_STRS:
        splt = idx_str.split('-')
        if len(splt) == 1:
            idx = int(splt[-1])
            IDXS += [idx]
        elif len(splt) == 2:
            begin, end = map(int, splt)
            # make the ranges inclusive
            IDXS += list(range(begin, end+1))
        else:
            raise ValueError("Invalid argument for reaction_indices: {:s}"
                             .format(idx_str))

CWD = os.getcwd()
for idx in IDXS:
    path = ABSTR_DF.at[idx, 'path']
    smrk = ABSTR_DF.at[idx, 'smirks']
    (q1h_smi, q2_smi), (q1_smi, q2h_smi) = automechanic.smiles.split_smirks(smrk)
    inp_str = TMP_STR.format(q1h_smi=q1h_smi, q2_smi=q2_smi, q1_smi=q1_smi,
                             q2h_smi=q2h_smi, node=NODE)
    inp_path = os.path.join(path, INP_NAME)
    automechanic.io.write_file(inp_path, inp_str)
    os.chdir(path)
    print('@automechanic is entering {:s}...'.format(path))
    subprocess.check_call(CMDS)
    os.chdir(CWD)
